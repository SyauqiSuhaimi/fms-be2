import { Repository } from "typeorm";
import { User } from "./user.entity";
import { userPermission } from "./userpermission.entity";
import { userType } from "./usertype.entity";
import { Feature } from "./feature.entity";
import { WorkTrade } from "../entities/workTrade.entity";
export declare class AuthService {
    private readonly userRepository;
    private readonly userTypeRepository;
    private readonly userPermissionRepository;
    private readonly FeatureRepository;
    private WorkTradeRepository;
    constructor(userRepository: Repository<User>, userTypeRepository: Repository<userType>, userPermissionRepository: Repository<userPermission>, FeatureRepository: Repository<Feature>, WorkTradeRepository: Repository<WorkTrade>);
    test(): String;
    create(data: any): Promise<User>;
    createuserType(data: any): Promise<userType>;
    createuserPer(data: any): Promise<userPermission>;
    createFeature(data: any): Promise<Feature>;
    findAll(condition: any): Promise<User[]>;
    findOn(condition: any): Promise<User>;
    findOne(condition: any): Promise<User>;
    findType(condition: any): Promise<userType>;
    findTypeall(condition: any): Promise<userType[]>;
    findPermission(condition: any): Promise<userPermission>;
    findFeature(condition: any): Promise<Feature>;
    findall(data: any): Promise<User[]>;
    findAllType(data: any): Promise<userType[]>;
    typeByCompany(data: any): Promise<userType[]>;
    findAllTypeuser(data: any): Promise<userType[]>;
    findAllPermission(data: any): Promise<userPermission[]>;
    findAllFeature(data: any): Promise<Feature[]>;
    findUsertypeFeature(id: number): Promise<any>;
    remove(id: number): Promise<any>;
    removeType(id: number): Promise<any>;
    removePermission(id: number): Promise<any>;
    removeFeature(id: number): Promise<any>;
    updateUser(id: number, data: any): Promise<any>;
    updateType(data: any): Promise<any>;
    updatePermission(id: number, data: any): Promise<any>;
    updateFeature(id: number, data: any): Promise<any>;
    userByCompany(userId: any): Promise<User[]>;
    userCond(condition: any): Promise<User[]>;
    getAllFeatures(condition: any): Promise<Feature[]>;
    getAllUser(condition: any): Promise<User[]>;
    parseExcelFilet(files: any[], company: string): Promise<void>;
    private preProcessData;
    private saveData;
}
