import { CreateReportingDto } from "./dto/create-reporting.dto";
import { Request } from "express";
import { JwtService } from "@nestjs/jwt";
import { CaseService } from "../case/case.service";
import { EquipmentService } from "../equipment/equipment.service";
import { Case } from "../entities/case.entity";
import { Repository } from "typeorm";
import { User } from "../auth/user.entity";
import { Equipment } from "../entities/equipment.entity";
import { Area } from "../entities/area.entity";
import { CaseHistory } from "../entities/caseHistory.entity";
import { CaseType } from "../entities/caseType.entity";
import { Company } from "../entities/company.entity";
import { Department } from "../entities/department.entity";
import { Holiday } from "../entities/holiday.entity";
import { ServiceContract } from "../entities/serviceContract.entity";
import { SubArea } from "../entities/subArea.entity";
import { Vendor } from "../entities/vendor.entity";
import { AuthService } from "../auth/auth.service";
import { NewsService } from "../news/news.service";
import { DepartmentService } from "../department/department.service";
import { WorkTradeService } from "../workTrade/worktrade.service";
import { Eq_BrandService } from "../Eq_Brand/Eq_Brand.service";
import { Eq_TypeService } from "../Eq_Type/Eq_Type.service";
import { Eq_ClassService } from "../Eq_Class/Eq_Class.service";
import { Eq_ModelService } from "../Eq_Model/Eq_Model.service";
import { GeneralService } from "../helper/general.service";
import { Eq_Type } from "../entities/eq_type.entity";
import { Eq_Classifications } from "../entities/eq_classification.entity";
import { Eq_Brand } from "../entities/eq_brand.entity";
import { Eq_Model } from "../entities/eq_model.entity";
import { WorkTrade } from "../entities/workTrade.entity";
import { PPM } from "../entities/ppm.entity";
import { Connection } from "typeorm";
export declare class ReportingController {
    private jwtService;
    private caseService;
    private equipmentService;
    private AuthService;
    private NewsService;
    private DepartmentService;
    private WorkTradeService;
    private Eq_Brand;
    private Eq_Type;
    private Eq_Class;
    private Eq_Model;
    private CaseRepository;
    private UserRepository;
    private EquipmentRepository;
    private AreaRepository;
    private CaseHistoryRepository;
    private CaseTypeRepository;
    private CompanyRepository;
    private DepartmentRepository;
    private HolidayRepository;
    private ServiceContractRepository;
    private SubAreaRepository;
    private VendorRepository;
    private GeneralService;
    private readonly connection;
    constructor(jwtService: JwtService, caseService: CaseService, equipmentService: EquipmentService, AuthService: AuthService, NewsService: NewsService, DepartmentService: DepartmentService, WorkTradeService: WorkTradeService, Eq_Brand: Eq_BrandService, Eq_Type: Eq_TypeService, Eq_Class: Eq_ClassService, Eq_Model: Eq_ModelService, CaseRepository: Repository<Case>, UserRepository: Repository<User>, EquipmentRepository: Repository<Equipment>, AreaRepository: Repository<Area>, CaseHistoryRepository: Repository<CaseHistory>, CaseTypeRepository: Repository<CaseType>, CompanyRepository: Repository<Company>, DepartmentRepository: Repository<Department>, HolidayRepository: Repository<Holiday>, ServiceContractRepository: Repository<ServiceContract>, SubAreaRepository: Repository<SubArea>, VendorRepository: Repository<Vendor>, GeneralService: GeneralService, connection: Connection);
    mobile_dashboard(count: number, request: Request): Promise<{
        ppm: Case[];
        newCases: Case[];
        activeCases: Case[];
        closeCases: Case[];
        news: import("../entities/news.entity").News[];
        latestCase: any;
    }>;
    getDashboard(request: Request): Promise<{
        ppm: Case[];
        newCases: Case[];
        activeCases: Case[];
        teamMember: User[];
        closeCases: Case[];
        onholdCases: Case[];
        news: import("../entities/news.entity").News[];
    }>;
    dashboardCompany(request: Request, id: number): Promise<{
        news: any[];
        caselist: any[];
        ppmlist: any[];
        closeCases: any[];
        closeppm2: any[];
    }>;
    dataForReport(request: Request): Promise<{
        departmentList: Department[];
        worktradeList: WorkTrade[];
        eq_brand: Eq_Brand[];
        eq_type: Eq_Type[];
        eq_model: Eq_Model[];
        eq_class: Eq_Classifications[];
    }>;
    filterFn(endpoint: any, response: any, condition: any): any;
    searchByCondition(request: Request, post_input: any): Promise<any>;
    getTableRelation(table: any): {};
    condCase(condition: any, response: any): any;
    create(createReportingDto: CreateReportingDto): string;
    findAll(request: Request): Promise<number>;
    caseCondition(request: Request, dataBody: any): Promise<Case[]>;
    equipmentCondition(request: Request, dataBody: any): Promise<Equipment[]>;
    findAllbyRange(request: Request, startRange: number, endRange: number): Promise<number>;
    userCase(request: Request): Promise<Case[]>;
    TechCase(request: Request): Promise<number>;
    msqhData(request: Request, dataBody: any): Promise<any>;
    detailWo(request: Request, dataBody: any): Promise<any>;
    lifeExpect(request: Request): Promise<{
        life: number;
        total_cost: number;
        id: number;
        name: string;
        serial_number: string;
        asset_number: string;
        sjsb_no: string;
        eq_type: Eq_Type;
        description: string;
        eq_classification: Eq_Classifications;
        eq_brand: Eq_Brand;
        eq_model: Eq_Model;
        purchase_date: number;
        tc_Date: number;
        product_cost: number;
        accessories: string;
        warranty: number;
        lifespan: number;
        image_file: string;
        price_category: string;
        critical: boolean;
        cost: number;
        company: Company;
        department: Department;
        servicecontract: ServiceContract[];
        cases: Case[];
        worktrade: WorkTrade;
        subarea: SubArea;
        ppm: PPM[];
        tempPpm: import("../entities/tempppm.entity").tempPpm[];
        asset_type_code: string;
        barcode_image: string;
        eq_category: import("../entities/category.entity").Category;
        category_critical: import("../entities/category_critical.entity").Category_critical;
        category_cost: import("../entities/category_cost.entity").Category_cost;
        manufacture: import("../entities/manufacture.entity").manufacture;
        maker: string;
        registration_no: string;
        chassis_no: string;
        engine_no: string;
        engine_capacity: string;
        fuel_type: string;
        current_meter_reading: string;
        manufacturing_date: number;
        software_version_key: string;
        power_specification: string;
        volt: string;
        project: import("../entities/project.entity").project;
        disposal_status: import("../entities/disposal_status.entity").disposal_status;
        mda: import("../entities/mda.entity").mda;
        asset_status: import("../entities/asset_status.entity").Asset_Status;
        defect: import("../entities/defect.entity").defect[];
        routine: boolean;
        calibration: boolean;
        maintenance_category: string;
        nominated_contractor: boolean;
        last_work_order_no: string;
        last_service_work_no: string;
        last_work_date: number;
        last_service_date: number;
        eq_matric: import("../entities/eq_matric.entity").eq_matric[];
        warranty_start: number;
        warranty_end: number;
        age: number;
        year_service: number;
        commision_date: number;
        asset_group: import("../entities/asset_group.entity").asset_group;
        equipment_history: import("../entities/equipment_history.entity").Equipment_History[];
        status: import("../entities/equipment_history.entity").Equipment_History;
        vo_status: import("../entities/vo_status.entity").vo_status;
        effective_date: number;
        service_start_date: number;
        spata_code: string;
        spata_desc: string;
        specification: string;
        power_specification_watt: string;
        power_specification_ampere: string;
        vo_remark: string;
        purchase_category: string;
        main_supplier: Vendor;
        umdns: import("../entities/umdns.entity").umdns;
        jkpp_no: string;
        resourse_type: string;
        maintanance_work: boolean;
        labour_cost: number;
        vendor_cost: number;
        material_cost: number;
    }[]>;
    tableData(request: Request, dataBody: any): Promise<any>;
}
